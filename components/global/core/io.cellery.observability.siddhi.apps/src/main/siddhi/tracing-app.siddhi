/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("tracing-app")
@App:description("Cellery Tracing Siddhi App for processing and storing trace spans")

@source(type="runtime-agent", port="9411", @map(type="keyvalue", fail.on.missing.attribute="false"))
define stream ZipkinStreamIn(runtime string, traceId string, id string, parentId string, operationName string,
                             serviceName string, spanKind string, timestamp long, duration long, tags string);

@source(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryStreamIn(runtime string, requestId string, traceId string, spanId string, parentSpanId string,
                                sourceNamespace string, sourceInstance string, sourceInstanceKind string,
                                sourceComponent string, sourcePod string, destinationNamespace string,
                                destinationInstance string, destinationInstanceKind string, destinationComponent string,
                                destinationPod string, reporterKind string, requestPath string,
                                requestMethod string, requestSizeBytes long, responseCode long,
                                responseDurationNanoSec long, responseSizeBytes long, reporterUID string);

@Store(type="rdbms", datasource="CELLERY_OBSERVABILITY_DB", field.length="tags:8000")
@PrimaryKey("runtime", "traceId", "spanId")
@purge(enable="false")
define table DistributedTracingTable(runtime string, traceId string, spanId string, parentId string, namespace string,
                                     instance string, instanceKind string, serviceName string, pod string,
                                     operationName string, spanKind string, startTime long, duration long, tags string);

define function extractFromServiceName[javascript] return string {
    var serviceName = data[0];
    var index = data[1];    // 1: instance, 2: service, 3: instanceKind, 4: namespace

    var cellGatewayMatches = /^([a-z0-9]+(?:-[a-z0-9]+)*)--([a-z0-9]+(?:-[a-z0-9]+)*)\.(.+)$/.exec(serviceName);
    var mircoserviceMatches = /^([a-z0-9]+(?:-[a-z0-9]+)*)--([a-z0-9]+(?:-[a-z0-9]+)*)--([a-z0-9]+(?:-[a-z0-9]+)*)\.(.+)$/.exec(serviceName);
    var systemComponentMatches = /^([a-z0-9]+(?:-[a-z0-9]+)*)\.(.+)$/.exec(serviceName);

    var extractedData = "";
    if (cellGatewayMatches) {
        if (index === 3) {          // Instance Kind of a Cell Gateway is always Cell
            extractedData = "Cell";
        } else if (index === 4) {   // Namespace the Cell was deployed in
            extractedData = cellGatewayMatches[3];
        } else {                    // Extracting instance and service names (index === 1 or index === 2)
            extractedData = cellGatewayMatches[index];
        }
    } else if (mircoserviceMatches) {
        extractedData = mircoserviceMatches[index];
        if (index === 3) {      // Microservice instance Kind (ensuring that enum used is honoured)
            if (extractedData === "cell") {
                extractedData = "Cell";
            } else if (extractedData === "composite") {
                extractedData = "Composite";
            } else {
                extractedData = "";
            }
        }
    } else if (systemComponentMatches) {
        if (index === 2) {          // System component name
            extractedData = mircoserviceMatches[1];
        } else if (index === 4) {   // System Component namespace
            extractedData = mircoserviceMatches[2];
        }
    } else {
        extractedData = "";
    }

    // Handling service names that does not match any of the regexes
    if (!extractedData && index === 2) {
        extractedData = serviceName;
    }
    return extractedData.replace(/_/g, "-");
};

--
-- Storing Zipkin data received for Tracing
--

from ZipkinStreamIn
select
    runtime,
    str:replaceFirst(traceId, "^0+", "") as traceId,
    str:replaceFirst(id, "^0+", "") as spanId,
    ifThenElse(parentId is null, parentId, str:replaceFirst(parentId, "^0+", "")) as parentId,
    extractFromServiceName(serviceName, 4) as namespace,
    extractFromServiceName(serviceName, 1) as instance,
    extractFromServiceName(serviceName, 3) as instanceKind,
    extractFromServiceName(serviceName, 2) as serviceName,
    "" as pod,
    operationName,
    spanKind,
    timestamp as startTime,
    duration,
    tags
insert into ProcessedZipkinStream;

from ProcessedZipkinStream
update or insert into DistributedTracingTable
    set DistributedTracingTable.parentId = parentId,
        DistributedTracingTable.namespace = namespace,
        DistributedTracingTable.instance = instance,
        DistributedTracingTable.instanceKind = instanceKind,
        DistributedTracingTable.serviceName = serviceName,
        DistributedTracingTable.operationName = operationName,
        DistributedTracingTable.spanKind = spanKind,
        DistributedTracingTable.startTime = startTime,
        DistributedTracingTable.duration = duration,
        DistributedTracingTable.tags = tags
    on DistributedTracingTable.runtime == runtime and DistributedTracingTable.traceId == traceId
        and DistributedTracingTable.spanId == spanId;

--
-- Filling additional data from Telemetry
--

-- Extracting information for local service
from TelemetryStreamIn[traceId != "" and spanId != ""]
insert into FilteredTelemetryStreamIn;

from FilteredTelemetryStreamIn
select
    runtime,
    str:replaceFirst(traceId, "^0+", "") as traceId,
    str:replaceFirst(spanId, "^0+", "") as spanId,
    ifThenElse(reporterKind == "inbound", "SERVER", "CLIENT") as spanKind,
    ifThenElse(reporterKind == "inbound", destinationNamespace, sourceNamespace) as namespace,
    ifThenElse(reporterKind == "inbound", destinationInstance, sourceInstance) as instance,
    ifThenElse(reporterKind == "inbound", destinationInstanceKind, sourceInstanceKind) as instanceKind,
    ifThenElse(reporterKind == "inbound", destinationComponent, sourceComponent) as serviceName,
    ifThenElse(reporterKind == "inbound", destinationPod, sourcePod) as pod
insert into ProcessedTelemetryDataStream;

-- Extracting information for remote service
from FilteredTelemetryStreamIn
select
    runtime,
    str:replaceFirst(traceId, "^0+", "") as traceId,
    str:replaceFirst(spanId, "^0+", "") as spanId,
    ifThenElse(reporterKind == "inbound", "CLIENT", "SERVER") as spanKind,
    ifThenElse(reporterKind == "inbound", sourceNamespace, destinationNamespace) as namespace,
    ifThenElse(reporterKind == "inbound", sourceInstance, destinationInstance) as instance,
    ifThenElse(reporterKind == "inbound", sourceInstanceKind, destinationInstanceKind) as instanceKind,
    ifThenElse(reporterKind == "inbound", sourceComponent, destinationComponent) as serviceName,
    ifThenElse(reporterKind == "inbound", sourcePod, destinationPod) as pod
insert into ProcessedTelemetryDataStream;

from ProcessedTelemetryDataStream[(not serviceName is null) and (serviceName != "")]
select
    runtime,
    traceId,
    spanId,
    "" as parentId,
    namespace,
    ifThenElse(instance is null, extractFromServiceName(serviceName, 1), instance) as instance,
    instanceKind,
    extractFromServiceName(serviceName, 2) as serviceName,
    pod,
    "" as operationName,
    spanKind,
    0L as startTime,
    0L as duration,
    "{}" as tags
insert into ExtractedTelemetryDataStream;

from ExtractedTelemetryDataStream[(not traceId is null) and (not spanId is null)]
update or insert into DistributedTracingTable
    set DistributedTracingTable.pod = pod
    on DistributedTracingTable.runtime == runtime and DistributedTracingTable.traceId == traceId
        and DistributedTracingTable.spanId == spanId;
