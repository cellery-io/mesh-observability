/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("k8s-info-app")
@App:description("This collects Kubernetes related information from runtime agents and stores them in the relevant data sources")

@source(type="runtime-agent", port="9815", agent.type="Kube",
    @map(type="keyvalue", fail.on.missing.attribute="false"))
define stream K8sEventSource(resourceKind string, currentTimestamp long, action string, runtime string,
                             namespace string, instance string, component string, instanceKind string,
                             creationTimestamp long, name string, deletionTimestamp long, nodeName string,
                             ingressTypes string);

@Store(type="rdbms", datasource="CELLERY_OBSERVABILITY_DB")
@PrimaryKey("runtime", "namespace", "instance", "component", "podName")
@purge(enable="false")
define table K8sPodInfoTable(runtime string, namespace string, instance string, component string,
                             creationTimestamp long, podName string, lastKnownAliveTimestamp long, nodeName string);

@Store(type="rdbms", datasource="CELLERY_OBSERVABILITY_DB")
@PrimaryKey("runtime", "namespace", "instance","component")
@purge(enable="false")
define table K8sComponentInfoTable(runtime string, namespace string, instance string, component string,
                                   creationTimestamp long, lastKnownAliveTimestamp long, instanceKind string,
                                   ingressTypes string);

-- Stream definition for the Pod related information extracted from K8sEventSource
define stream K8sPodStream(currentTimestamp long, action string, runtime string, namespace string,
                           instance string, component string, creationTimestamp long,
                           deletionTimestamp long, podName string, nodeName string);

-- Stream definition for the Component related information extracted from K8sComponentStream
define stream K8sComponentStream(currentTimestamp long, action string, runtime string, namespace string,
                                 instance String, component string, creationTimestamp long, instanceKind string,
                                 ingressTypes string);

--
-- Separating Events according to resource kind
--

from K8sEventSource[resourceKind == "Pod"]
select
    currentTimestamp, action, runtime, namespace, instance, component, creationTimestamp, deletionTimestamp,
    name as podName, nodeName
insert into K8sPodStream;

from K8sEventSource[resourceKind == "Component"]
select
    currentTimestamp, action, runtime, namespace, instance, component, creationTimestamp, instanceKind, ingressTypes
insert into K8sComponentStream;

--
-- Collecting Pod info
--

from K8sPodStream[action == "Add"]
select
    runtime, namespace, instance, component, creationTimestamp, podName, creationTimestamp as lastKnownAliveTimestamp,
    nodeName
insert into K8sPodInfoStream;

from K8sPodStream[action == "Update"]
select
    runtime, namespace, instance, component, creationTimestamp, podName, currentTimestamp as lastKnownAliveTimestamp,
    nodeName
insert into K8sPodInfoStream;

from K8sPodStream[action == "Delete"]
select
    runtime, namespace, instance, component, creationTimestamp, podName, deletionTimestamp as lastKnownAliveTimestamp,
    nodeName
insert into K8sPodInfoStream;

-- Inserting Pod info to the K8sPodInfoTable
from K8sPodInfoStream
update or insert into K8sPodInfoTable
    set K8sPodInfoTable.creationTimestamp = creationTimestamp,
        K8sPodInfoTable.lastKnownAliveTimestamp = lastKnownAliveTimestamp,
        K8sPodInfoTable.nodeName = nodeName
    on K8sPodInfoTable.runtime == runtime
        and K8sPodInfoTable.namespace == namespace
        and K8sPodInfoTable.instance == instance
        and K8sPodInfoTable.component == component
        and K8sPodInfoTable.podName == podName;

--
-- Collecting Component Info
--

from K8sComponentStream[action == "Add"]
select
    runtime, namespace, instance, component, creationTimestamp, creationTimestamp as lastKnownAliveTimestamp,
    instanceKind, ingressTypes
insert into K8sComponentInfoStream;

from K8sComponentStream[action == "Update" or action == "Delete"]
select
    runtime, namespace, instance, component, creationTimestamp, currentTimestamp as lastKnownAliveTimestamp,
    instanceKind, ingressTypes
insert into K8sComponentInfoStream;

-- Inserting Component info to the K8sComponentInfoTable
from K8sComponentInfoStream
update or insert into K8sComponentInfoTable
    set K8sComponentInfoTable.instanceKind = instanceKind,
        K8sComponentInfoTable.creationTimestamp = creationTimestamp,
        K8sComponentInfoTable.lastKnownAliveTimestamp = lastKnownAliveTimestamp,
        K8sComponentInfoTable.ingressTypes = ingressTypes
    on K8sComponentInfoTable.runtime == runtime
        and K8sComponentInfoTable.namespace == namespace
        and K8sComponentInfoTable.instance == instance
        and K8sComponentInfoTable.component == component;

--
-- Batching K8s Components Stream to reduce the number of Model entries.
-- This will make sure that the model updates are done in 5 second batches.
--

from K8sComponentStream#window.timeBatch(5 sec)
insert expired events into BatchedK8sComponentStream;

--
-- Adding nodes to the Dependency Model
--

from BatchedK8sComponentStream[action == "Add"]
insert into FilteredNodeUpdatesStream;

from FilteredNodeUpdatesStream#model:addNode(runtime, namespace, instance, component, instanceKind)
insert into DummyStream;

--
-- Removing nodes from the Dependency Model
--

from BatchedK8sComponentStream[action == "Delete"]
insert into FilteredNodeDeletesStream;

from FilteredNodeDeletesStream#model:removeNode(runtime, namespace, instance, component)
insert into DummyStream;
