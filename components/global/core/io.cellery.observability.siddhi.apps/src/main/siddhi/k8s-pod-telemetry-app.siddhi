/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("k8s-pod-telemetry-app")
@App:description("This collects Kubernetes pod related information and stores them in the relevant data sources")

define trigger K8sScrapeTrigger at every 10 min;

@source(type="k8s-component-pods", @map(type="keyvalue", fail.on.missing.attribute="false"))
define stream K8sPodEventSourceStream(namespace string, instance string, component string, podName string,
                                      instanceKind string, creationTimestamp long, deletionTimestamp long,
                                      nodeName string, status string, action string);

@Store(type="rdbms", datasource="CELLERY_OBSERVABILITY_DB")
@PrimaryKey("namespace", "instance", "component", "podName")
@purge(enable="false")
define table K8sPodInfoTable(namespace string, instance string, component string, podName string,
                             creationTimestamp long, lastKnownAliveTimestamp long, nodeName string);

define stream K8sComponentPodStream(namespace string, instance string, component string, podName string,
                                    instanceKind string, creationTimestamp long, lastKnownAliveTimestamp long,
                                    nodeName string, status string, action string);

-- Collecting Pod info from different sources
-- This collects Pod Info from the K8s watch as well as periodically by scraping K8s API Server

from K8sScrapeTrigger#k8sClient:getComponentPods()
select
    namespace, instance, component, podName, instanceKind, creationTimestamp,
    triggered_time as lastKnownAliveTimestamp, nodeName, "Running" as status, "" as action
insert into K8sComponentPodStream;

from K8sPodEventSourceStream
select
    namespace, instance, component, podName, instanceKind, creationTimestamp,
    deletionTimestamp as lastKnownAliveTimestamp, nodeName, status, action
insert into K8sComponentPodStream;

-- Inserting Pod info to the K8sPodInfoTable

from K8sComponentPodStream[action == "" or action == "DELETED"]
select namespace, instance, component, podName, creationTimestamp, lastKnownAliveTimestamp, nodeName
insert into K8sPodInfoStream;

from K8sComponentPodStream[action == "CREATED"]
select namespace, instance, component, podName, creationTimestamp, creationTimestamp as lastKnownAliveTimestamp, nodeName
insert into K8sPodInfoStream;

from K8sComponentPodStream[action == "MODIFIED" or action == "ERROR"]
select namespace, instance, component, podName, creationTimestamp, time:timestampInMilliseconds() as lastKnownAliveTimestamp, nodeName
insert into K8sPodInfoStream;

from K8sPodInfoStream
update or insert into K8sPodInfoTable
    set K8sPodInfoTable.creationTimestamp = creationTimestamp,
        K8sPodInfoTable.lastKnownAliveTimestamp = lastKnownAliveTimestamp,
        K8sPodInfoTable.nodeName = nodeName
    on K8sPodInfoTable.namespace == namespace and  K8sPodInfoTable.instance == instance and K8sPodInfoTable.component == component and K8sPodInfoTable.podName == podName;
