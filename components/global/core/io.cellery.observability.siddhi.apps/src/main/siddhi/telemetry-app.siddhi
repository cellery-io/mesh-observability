/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("telemetry-app")
@App:description("Cellery Telemetry app for processing and storing http requests")

@source(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryStreamIn(runtime string, requestId string, traceId string, spanId string, parentSpanId string,
                                sourceNamespace string, sourceInstance string, sourceInstanceKind string,
                                sourceComponent string, sourcePod string, destinationNamespace string,
                                destinationInstance string, destinationInstanceKind string, destinationComponent string,
                                destinationPod string, requestPath string, requestMethod string, requestSizeBytes long,
                                responseCode long, responseDurationNanoSec long, responseSizeBytes long,
                                reporterUID string, reporterKind string);

define stream ProcessedRequestsStream(runtime string, sourceNamespace string, sourceInstance string,
                                      sourceInstanceKind string, sourceComponent string, destinationNamespace string,
                                      destinationInstance string, destinationInstanceKind string,
                                      destinationComponent string, httpResponseGroup string,
                                      responseTimeMilliSec double, requestSizeBytes long, responseSizeBytes long);

@store(type="rdbms", datasource="CELLERY_OBSERVABILITY_DB", field.length="runtime: 253, sourceNamespace: 253, sourceInstance:253, sourceInstanceKind:9, sourceComponent:253, destinationNamespace:253, destinationInstance:253, destinationInstanceKind:9, destinationComponent: 253, httpResponseGroup:3")
@purge(enable="false")
define aggregation RequestAggregation from ProcessedRequestsStream
select
    runtime,
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    destinationNamespace,
    destinationInstance,
    destinationInstanceKind,
    destinationComponent,
    httpResponseGroup,
    sum(responseTimeMilliSec) as totalResponseTimeMilliSec,
    sum(requestSizeBytes) as totalRequestSizeBytes,
    sum(responseSizeBytes) as totalResponseSizeBytes,
    count() as requestCount
group by
    runtime, sourceNamespace, sourceInstance, sourceComponent, destinationNamespace, destinationInstance,
    destinationComponent, httpResponseGroup
aggregate every sec...year;

from TelemetryStreamIn[(not regex:matches("^kubernetes://[a-z0-9]+(?:-[a-z0-9]+)*--gateway-deployment-[^\.-]+-[^\.-]+\.[^\.]+$", reporterUID)) and destinationNamespace != "istio-system"]
select
    runtime,
    traceId,
    spanId,
    parentSpanId,
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    destinationNamespace,
    destinationInstance,
    destinationInstanceKind,
    destinationComponent,
    responseCode,
    responseDurationNanoSec,
    ifThenElse(requestSizeBytes is null, 0L, requestSizeBytes) as requestSizeBytes,
    ifThenElse(responseSizeBytes is null, 0L, responseSizeBytes) as responseSizeBytes
insert into SanitizedRequestsStream;

-- There are no duplicates for the gateway (Since telemetry reported by the gateway is ignored)
from SanitizedRequestsStream[sourceComponent != "gateway" and destinationComponent != "gateway"]
insert into NonGatewayRequestsStream;

from SanitizedRequestsStream[sourceComponent == "gateway" or destinationComponent == "gateway"]
select
    runtime,
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    destinationNamespace,
    destinationInstance,
    destinationInstanceKind,
    destinationComponent,
    responseCode,
    responseDurationNanoSec,
    requestSizeBytes,
    responseSizeBytes
insert into DeDuplicatedTelemetryStream;

-- Removing duplications of the metrics.
from NonGatewayRequestsStream#telemetry:deduplicate(60 sec, runtime, traceId, spanId, parentSpanId, sourceNamespace,
                                                    sourceInstance, sourceComponent, destinationNamespace,
                                                    destinationInstance, destinationComponent, requestSizeBytes,
                                                    responseDurationNanoSec, responseSizeBytes)
select
    runtime,
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    destinationNamespace,
    destinationInstance,
    destinationInstanceKind,
    destinationComponent,
    responseCode,
    maxResponseDuration as responseDurationNanoSec,
    maxRequestSize as requestSizeBytes,
    maxResponseSize as responseSizeBytes
insert expired events into DeDuplicatedTelemetryStream;

from DeDuplicatedTelemetryStream
select
    runtime,
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    destinationNamespace,
    destinationInstance,
    destinationInstanceKind,
    destinationComponent,
    str:concat(convert(cast(responseCode, "long") / 100, "string"), "xx") as httpResponseGroup,
    convert(responseDurationNanoSec, "double") / 1000000 as responseTimeMilliSec,
    requestSizeBytes,
    responseSizeBytes
insert into ProcessedRequestsStream;

-- Adding edges to the Dependency Model
from ProcessedRequestsStream#model:addEdge(runtime, sourceNamespace, sourceInstance, sourceComponent,
    sourceInstanceKind, destinationNamespace, destinationInstance, destinationComponent, destinationInstanceKind)
insert into DummyStream;
