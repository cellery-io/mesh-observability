/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

@App:name("istio-telemetry-app")
@App:description("This receives the attributes generally received by the Istio Mixer")

@source(type="telemetry-receiver", @map(type="json", fail.on.missing.attribute="false"))
define stream TelemetryStream(requestID string, traceID string, spanID string, sourceUID string, destinationUID string,
                              contextReporterKind string, requestPath string, requestMethod string,
                              requestTotalSize long, responseCode long, responseDurationNanoSec long,
                              responseTotalSize long);

@source(type="inMemory", topic="k8s-component-pods", @map(type="passThrough"))
define stream K8sComponentPodsInMemorySink(instance string, component string, podName string, instanceKind string,
                                           creationTimestamp long, lastKnownAliveTimestamp long, nodeName string,
                                           status string, action string);

@sink(type="inMemory", topic="istio-mixer-report", @map(type="passThrough"))
define stream TelemetryInMemorySink(requestId string, traceId string, spanId string, sourceNamespace string,
                                    sourceInstance string, sourceInstanceKind string, sourceComponent string,
                                    sourcePod string, destinationNamespace string, destinationInstance string,
                                    destinationInstanceKind string, destinationComponent string, destinationPod string,
                                    contextReporterKind string, requestPath string, requestMethod string,
                                    requestSizeBytes long, responseCode long, responseDurationNanoSec long,
                                    responseSizeBytes long);

define window K8sComponentPodInfoWindow(podName string, instance string, instanceKind string, component string) unique:time(podName, 11 minutes);

define function extractFromUID[javascript] return string {
    var uid = data[0];
    var index = data[1];    // 1: pod, 2: namespace

    var matches = /^([a-z0-9-.]+)\.([a-z0-9-]+)$/.exec(uid);

    var extractedData = "";
    if (matches) {
        extractedData = matches[index];
    } else if (uid === "Synapse-PT-HttpComponents-NIO") {
        if (index === 1) {
            extractedData = "global-gateway";
        }
    }
    return extractedData;
};

from K8sComponentPodsInMemorySink
select podName, instance, instanceKind, component
insert into K8sComponentPodInfoWindow;

from TelemetryStream[(not sourceUID is null) and (not destinationUID is null)]
select
    requestID as requestId,
    traceID as traceId,
    spanID as spanId,
    str:replaceFirst(sourceUID, "^kubernetes://", "") as sourceUID,
    str:replaceFirst(destinationUID, "^kubernetes://", "") as destinationUID,
    contextReporterKind,
    requestPath,
    requestMethod,
    requestTotalSize as requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseTotalSize as responseSizeBytes
insert into PreprocessedTelemetryStream;

-- Storing the required attributes in a in memory sink (To be accessed from other siddhi apps)
-- When updating the used attributes from the received attributes the stream definitions needs to be updated in all
-- the places where the in memory source is used

from PreprocessedTelemetryStream
select
    requestId,
    traceId,
    spanId,
    extractFromUID(sourceUID, 2) as sourceNamespace,
    extractFromUID(sourceUID, 1) as sourcePod,
    extractFromUID(destinationUID, 2) as destinationNamespace,
    extractFromUID(destinationUID, 1) as destinationPod,
    contextReporterKind,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into ProcessedTelemetryStream;

-- Handling the special case of the global gateway

from ProcessedTelemetryStream[sourcePod == "global-gateway"]
select
    requestId,
    traceId,
    spanId,
    sourceNamespace,
    "" as sourceInstance,
    "" as sourceInstanceKind,
    sourcePod as sourceComponent,
    "" as sourcePod,
    destinationNamespace,
    "" as destinationInstance,
    "" as destinationInstanceKind,
    sourcePod as destinationComponent,
    "" as destinationPod,
    contextReporterKind,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into TelemetryInMemorySink;

-- This is required since the filter processor is not a findable processor and therefore cannot be joined
from ProcessedTelemetryStream[sourcePod != "global-gateway"]
insert into NonGlobalGatewayProcessedTelemetryStream;

from NonGlobalGatewayProcessedTelemetryStream as T inner join K8sComponentPodInfoWindow as K
    on T.sourcePod == K.podName
select
    requestId,
    traceId,
    spanId,
    sourceNamespace,
    K.instance as sourceInstance,
    K.instanceKind as sourceInstanceKind,
    K.component as sourceComponent,
    sourcePod,
    destinationNamespace,
    destinationPod,
    contextReporterKind,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into SourceInstanceExtractedTelemetryStream;

from SourceInstanceExtractedTelemetryStream as T inner join K8sComponentPodInfoWindow as K
    on T.destinationPod == K.podName
select
    requestId,
    traceId,
    spanId,
    sourceNamespace,
    sourceInstance,
    sourceInstanceKind,
    sourceComponent,
    sourcePod,
    destinationNamespace,
    K.instance as destinationInstance,
    K.instanceKind as destinationInstanceKind,
    K.component as destinationComponent,
    destinationPod,
    contextReporterKind,
    requestPath,
    requestMethod,
    requestSizeBytes,
    responseCode,
    responseDurationNanoSec,
    responseSizeBytes
insert into TelemetryInMemorySink;
